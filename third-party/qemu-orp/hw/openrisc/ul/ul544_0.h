/*
 * AUTOGENERATED  July 2014

   Copyright 2015, Google Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
#ifndef __UL544_0__
#define __UL544_0__

#include "ul32.h"

/*
 * ul544
 */
typedef struct ul544_s {
    uint32_t x[17];
} ul544[1];

typedef ul544 tidl_ul544_t;

void ul544_init(ul544 x);
void ul544_clear(ul544 x);

typedef struct mod544_s {
    ul544 n;
    uint32_t np;
    ul544 rsq;
} mod544[1];

/*
 * Print a ul544 to stdout
 */
void ul544_print(const ul544 src);

/*
 * Returns 1 if the given ul544 is zero, else returns 0
 */
int ul544_iszero(const ul544 src);

/*
 * Setters
 */
void ul544_set(ul544 dst, const ul544 src);

/*
 * Set all of the limbs of a ul544 at once
 */
void ul544_set_fullui(ul544 dst, uint32_t l16, uint32_t l15, uint32_t l14, uint32_t l13, uint32_t l12, uint32_t l11, uint32_t l10, uint32_t l9, uint32_t l8, uint32_t l7, uint32_t l6, uint32_t l5, uint32_t l4, uint32_t l3, uint32_t l2, uint32_t l1, uint32_t l0);

/*
 * Set a ul544 to a uint32_t
 */
void ul544_set_ui(ul544 dst, uint32_t i);

/*
 * Get a uint32_t out of a ul544
 */
uint32_t ul544_get_ui(const ul544 src);




/*
 * Compare two ul544's
 */
int ul544_cmp(const ul544 src1, const ul544 src2);

/*
 * Compare a ul544 with a uint32_t
 */
int ul544_cmp_ui(const ul544 src1, uint32_t src2);




/*
 * Yields 1 + index of the most significant bit
 */
uint32_t ul544_msb(const ul544 src);

/*
 * Returns 1 if (1 << i) & src > 0, else returns 0
 */
uint32_t ul544_testbit(uint32_t i, const ul544 src);

/*
 * Sets the indicated bit, as per (1 << i)
 */
void ul544_setbit(uint32_t i, ul544 src);

/*
 * Add two ul544's
 */
void ul544_add(ul544 dst, const ul544 src1, const ul544 src2);

/*
 * Sub two ul544's
 */
void ul544_sub(ul544 dst, const ul544 src1, const ul544 src2);

/*
 * Mul two ul544's
 */
void ul544_mul(ul544 dst, const ul544 src1, const ul544 src2);




/*
 * Initialize mod544
 */
void mod544_init(mod544 n);

/*
 * Add two ul544's modulo another
 */
void ul544_modadd(ul544 dst, const ul544 src1, const ul544 src2, const mod544 n);

/*
 * Subtract one ul544 from another modulo a third
 */
void ul544_modsub(ul544 dst, const ul544 src1, const ul544 src2, const mod544 n);

/*
 * Mul two ul544's modulo a third, followed by Montgomery reduction
 */
void ul544_modmul(ul544 _dst, const ul544 _src1, const ul544 _src2, const mod544 n);

/*
 * Convert a ul544 into Montgomery form
 */
void ul544_to_montgomery(ul544 dst, const ul544 src, const mod544 mod);

/*
 * Convert a ul544 out-of Montgomery form
 */
void ul544_from_montgomery(ul544 dst, const ul544 src, const mod544 mod);




/*
 * Right-shift a ul544 by some number of bits
 */
void ul544_rshift(ul544 dst, const ul544 src, int shift);




/*
 * Left shift a ul544 by some number of words
 */
void ul544_lshiftw(ul544 dst, const ul544 src, int w);

/*
 * Multiply a ul544 by a uint32_t
 */
void ul544_mulu32(ul544 dst, const ul544 src, uint32_t x);




#endif
