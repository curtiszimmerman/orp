/*
 * AUTOGENERATED  July 2014

   Copyright 2015, Google Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
#ifndef __UL576_0__
#define __UL576_0__

#include "ul32.h"

/*
 * ul576
 */
typedef struct ul576_s {
    uint32_t x[18];
} ul576[1];

typedef ul576 tidl_ul576_t;

void ul576_init(ul576 x);
void ul576_clear(ul576 x);

typedef struct mod576_s {
    ul576 n;
    uint32_t np;
    ul576 rsq;
} mod576[1];



/*
 * Print a ul576 to stdout
 */
void ul576_print(const ul576 src);

/*
 * Returns 1 if the given ul576 is zero, else returns 0
 */
int ul576_iszero(const ul576 src);

/*
 * Setters
 */
void ul576_set(ul576 dst, const ul576 src);

/*
 * Set all of the limbs of a ul576 at once
 */
void ul576_set_fullui(ul576 dst, uint32_t l17, uint32_t l16, uint32_t l15, uint32_t l14, uint32_t l13, uint32_t l12, uint32_t l11, uint32_t l10, uint32_t l9, uint32_t l8, uint32_t l7, uint32_t l6, uint32_t l5, uint32_t l4, uint32_t l3, uint32_t l2, uint32_t l1, uint32_t l0);

/*
 * Set a ul576 to a uint32_t
 */
void ul576_set_ui(ul576 dst, uint32_t i);

/*
 * Get a uint32_t out of a ul576
 */
uint32_t ul576_get_ui(const ul576 src);




/*
 * Compare two ul576's
 */
int ul576_cmp(const ul576 src1, const ul576 src2);

/*
 * Compare a ul576 with a uint32_t
 */
int ul576_cmp_ui(const ul576 src1, uint32_t src2);




/*
 * Yields 1 + index of the most significant bit
 */
uint32_t ul576_msb(const ul576 src);

/*
 * Returns 1 if (1 << i) & src > 0, else returns 0
 */
uint32_t ul576_testbit(uint32_t i, const ul576 src);

/*
 * Sets the indicated bit, as per (1 << i)
 */
void ul576_setbit(uint32_t i, ul576 src);

/*
 * Add two ul576's
 */
void ul576_add(ul576 dst, const ul576 src1, const ul576 src2);

/*
 * Sub two ul576's
 */
void ul576_sub(ul576 dst, const ul576 src1, const ul576 src2);

/*
 * Mul two ul576's
 */
void ul576_mul(ul576 dst, const ul576 src1, const ul576 src2);




/*
 * Initialize mod576
 */
void mod576_init(mod576 n);

/*
 * Add two ul576's modulo another
 */
void ul576_modadd(ul576 dst, const ul576 src1, const ul576 src2, const mod576 n);

/*
 * Subtract one ul576 from another modulo a third
 */
void ul576_modsub(ul576 dst, const ul576 src1, const ul576 src2, const mod576 n);

/*
 * Mul two ul576's modulo a third, followed by Montgomery reduction
 */
void ul576_modmul(ul576 _dst, const ul576 _src1, const ul576 _src2, const mod576 n);

/*
 * Convert a ul576 into Montgomery form
 */
void ul576_to_montgomery(ul576 dst, const ul576 src, const mod576 mod);

/*
 * Convert a ul576 out-of Montgomery form
 */
void ul576_from_montgomery(ul576 dst, const ul576 src, const mod576 mod);




/*
 * Right-shift a ul576 by some number of bits
 */
void ul576_rshift(ul576 dst, const ul576 src, int shift);




/*
 * Left shift a ul576 by some number of words
 */
void ul576_lshiftw(ul576 dst, const ul576 src, int w);

/*
 * Multiply a ul576 by a uint32_t
 */
void ul576_mulu32(ul576 dst, const ul576 src, uint32_t x);




#endif
